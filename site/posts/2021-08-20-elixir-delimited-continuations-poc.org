---
title: Delimited Continuations with <code>shift/reset</code> in Elixir
tags: elixir, delimited continuations, proof of concept,
---

* Introduction

Ever since I heard about those things called "continuations", I've
been fascinated by what they are and how they work, specially after
discovering this thing called ~callCC~[fn:1] [fn:2]. If this was not
hard enough to grasp, some time later I discovered that continuations
can be /delimited/ or /undelimited/. Recently I found several
references about continuations[fn:3], but they tend to be papers that
are hard to read without some prior knowledge, which I don't
have. Therefore, I'm unable to present here some intuitive explanation
about them. Maybe after much more reading.

Instead, this post is about a proof of concept (POC) delimited
continuations library in Elixir. This is the result of my attempts at
trying to understand (delimited) continuations by way of practice. The
resulting library converts Elixir code into continuation passing
style, and then uses that transformed code to implement the control
operators ~shift~ and ~reset~. Theses things will be briefly discussed
here. I hope this may help someone else trying to grasp continuations
and, if I'm lucky, someone may teach me more by pointing out the gaps
in my understanding and implementation. =)

This post begins with me trying to describe simply what continuation
passing style (CPS) is (in my understanding), which was a prerequisite
for creating the library. Then, I'll focus briefly on delimited
continuations (again, within my limited abilities), in particular
regarding the control operators ~shift~ and ~reset~. Finally, I'll
present some (hopefully) interesting examples using these operators
and the current library.

* Continuation Passing Style (CPS)

A continuation is the materialization of "what comes next" at a given
point of execution of a program. Or, a continuation is the evaluation
context surrounding the /reducible expression/ (/redex/)[fn:4]. As an
example[fn:4]:

#+BEGIN_SRC elixir
  #  continuation
  # ↓↓↓↓
    4 - (1 + 1)
  #     ↑↑↑↑↑↑↑
  #      redex
#+END_SRC

Here, in order for the whole expression to be reduced, the redex is
~(1 + 1)~, and the continuation is ~4 - _~, where ~_~ takes the place
of the redex as it is reduced.

* Shift / Reset

* Some examples

* References

* Footnotes
[fn:4] https://docs.racket-lang.org/reference/eval-model.html#%28part._cont-model%29

[fn:3] https://github.com/rain-1/continuations-study-group

[fn:2] http://community.schemewiki.org/?call-with-current-continuation

[fn:1] https://en.m.wikibooks.org/wiki/Haskell/Continuation_passing_style#callCC
